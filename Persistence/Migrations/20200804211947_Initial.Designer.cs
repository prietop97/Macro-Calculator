// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200804211947_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity("Domain.MealEntities.DailyMealPlan", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("UserId");

                    b.Property<int>("Calories");

                    b.Property<int>("CarbsGrams");

                    b.Property<DateTime>("Date");

                    b.Property<int>("FatGrams");

                    b.Property<int>("ProteinGrams");

                    b.HasKey("Id", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("DailyMealPlan");
                });

            modelBuilder.Entity("Domain.MealEntities.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Calories");

                    b.Property<int>("CarbsGrams");

                    b.Property<int>("FatGrams");

                    b.Property<int>("ProteinGrams");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Meal");
                });

            modelBuilder.Entity("Domain.MealEntities.MealType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("MealType");
                });

            modelBuilder.Entity("Domain.MealEntities.UserMeals", b =>
                {
                    b.Property<int>("MealId");

                    b.Property<int>("MealPlanId");

                    b.Property<int>("MealTypeId");

                    b.Property<string>("AppUserId");

                    b.HasKey("MealId", "MealPlanId", "MealTypeId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("MealPlanId");

                    b.HasIndex("MealTypeId");

                    b.ToTable("UsersMeals");
                });

            modelBuilder.Entity("Domain.UserEntities.ActivityFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<float>("Multiplier");

                    b.HasKey("Id");

                    b.ToTable("ActivitiesFactor");
                });

            modelBuilder.Entity("Domain.UserEntities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.UserEntities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LongDescription");

                    b.Property<int>("Multiplier");

                    b.Property<string>("ShortDescription");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Domain.UserEntities.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("Multiplier");

                    b.HasKey("Id");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("Domain.UserEntities.UnitSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.HasKey("Id");

                    b.ToTable("UnitSystems");
                });

            modelBuilder.Entity("Domain.UserEntities.UserStat", b =>
                {
                    b.Property<string>("AppUserId");

                    b.Property<int>("GoalId");

                    b.Property<int>("GenderId");

                    b.Property<int>("ActivityFactorId");

                    b.Property<int>("UnitSystemId");

                    b.Property<double>("CarbsGrams");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<double>("FatGrams");

                    b.Property<double>("Height");

                    b.Property<int>("Id");

                    b.Property<double>("ProteinGrams");

                    b.Property<double>("Weight");

                    b.HasKey("AppUserId", "GoalId", "GenderId", "ActivityFactorId", "UnitSystemId");

                    b.HasIndex("ActivityFactorId");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("GenderId");

                    b.HasIndex("GoalId");

                    b.HasIndex("UnitSystemId");

                    b.ToTable("UserStats");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.MealEntities.DailyMealPlan", b =>
                {
                    b.HasOne("Domain.UserEntities.AppUser", "AppUser")
                        .WithMany("DailyMealPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.MealEntities.UserMeals", b =>
                {
                    b.HasOne("Domain.UserEntities.AppUser")
                        .WithMany("UserMeals")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Domain.MealEntities.Meal", "Meal")
                        .WithMany("UserMeals")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.MealEntities.DailyMealPlan", "MealPlan")
                        .WithMany("UserMeals")
                        .HasForeignKey("MealPlanId")
                        .HasPrincipalKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.MealEntities.MealType", "MealType")
                        .WithMany("Meals")
                        .HasForeignKey("MealTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.UserEntities.UserStat", b =>
                {
                    b.HasOne("Domain.UserEntities.ActivityFactor", "ActivityFactor")
                        .WithMany("UserStats")
                        .HasForeignKey("ActivityFactorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.UserEntities.AppUser", "AppUser")
                        .WithOne("UserStat")
                        .HasForeignKey("Domain.UserEntities.UserStat", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.UserEntities.Gender", "Gender")
                        .WithMany("UserStats")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.UserEntities.Goal", "Goal")
                        .WithMany("UserStats")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.UserEntities.UnitSystem", "UnitSystem")
                        .WithMany("UserStats")
                        .HasForeignKey("UnitSystemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.UserEntities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.UserEntities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.UserEntities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.UserEntities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
